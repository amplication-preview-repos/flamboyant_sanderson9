/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentMethod } from "./PaymentMethod";
import { PaymentMethodCountArgs } from "./PaymentMethodCountArgs";
import { PaymentMethodFindManyArgs } from "./PaymentMethodFindManyArgs";
import { PaymentMethodFindUniqueArgs } from "./PaymentMethodFindUniqueArgs";
import { CreatePaymentMethodArgs } from "./CreatePaymentMethodArgs";
import { UpdatePaymentMethodArgs } from "./UpdatePaymentMethodArgs";
import { DeletePaymentMethodArgs } from "./DeletePaymentMethodArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { PaymentMethodService } from "../paymentMethod.service";
@graphql.Resolver(() => PaymentMethod)
export class PaymentMethodResolverBase {
  constructor(protected readonly service: PaymentMethodService) {}

  async _paymentMethodsMeta(
    @graphql.Args() args: PaymentMethodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentMethod])
  async paymentMethods(
    @graphql.Args() args: PaymentMethodFindManyArgs
  ): Promise<PaymentMethod[]> {
    return this.service.paymentMethods(args);
  }

  @graphql.Query(() => PaymentMethod, { nullable: true })
  async paymentMethod(
    @graphql.Args() args: PaymentMethodFindUniqueArgs
  ): Promise<PaymentMethod | null> {
    const result = await this.service.paymentMethod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentMethod)
  async createPaymentMethod(
    @graphql.Args() args: CreatePaymentMethodArgs
  ): Promise<PaymentMethod> {
    return await this.service.createPaymentMethod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentMethod)
  async updatePaymentMethod(
    @graphql.Args() args: UpdatePaymentMethodArgs
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.updatePaymentMethod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentMethod)
  async deletePaymentMethod(
    @graphql.Args() args: DeletePaymentMethodArgs
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.deletePaymentMethod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: PaymentMethod,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
